// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hpc.msg

#include "../inc/hpc.msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace hpc {
class simple_cmd_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<simple_cmd_reply> _instance;
} _simple_cmd_reply_default_instance_;
class simple_cmd_reply_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<simple_cmd_reply_data> _instance;
} _simple_cmd_reply_data_default_instance_;
class cmd_begin_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cmd_begin_reply> _instance;
} _cmd_begin_reply_default_instance_;
class cmd_tx_data_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cmd_tx_data_reply> _instance;
} _cmd_tx_data_reply_default_instance_;
class cmd_get_data_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cmd_get_data_reply> _instance;
} _cmd_get_data_reply_default_instance_;
class cmd_config_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cmd_config_reply> _instance;
} _cmd_config_reply_default_instance_;
class cmd_test_reg_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cmd_test_reg_reply> _instance;
} _cmd_test_reg_reply_default_instance_;
}  // namespace hpc
static void InitDefaultsscc_info_cmd_begin_reply_hpc_2emsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hpc::_cmd_begin_reply_default_instance_;
    new (ptr) ::hpc::cmd_begin_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hpc::cmd_begin_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cmd_begin_reply_hpc_2emsg =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_cmd_begin_reply_hpc_2emsg}, {}};

static void InitDefaultsscc_info_cmd_config_reply_hpc_2emsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hpc::_cmd_config_reply_default_instance_;
    new (ptr) ::hpc::cmd_config_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hpc::cmd_config_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cmd_config_reply_hpc_2emsg =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_cmd_config_reply_hpc_2emsg}, {}};

static void InitDefaultsscc_info_cmd_get_data_reply_hpc_2emsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hpc::_cmd_get_data_reply_default_instance_;
    new (ptr) ::hpc::cmd_get_data_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hpc::cmd_get_data_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cmd_get_data_reply_hpc_2emsg =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_cmd_get_data_reply_hpc_2emsg}, {}};

static void InitDefaultsscc_info_cmd_test_reg_reply_hpc_2emsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hpc::_cmd_test_reg_reply_default_instance_;
    new (ptr) ::hpc::cmd_test_reg_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hpc::cmd_test_reg_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cmd_test_reg_reply_hpc_2emsg =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_cmd_test_reg_reply_hpc_2emsg}, {}};

static void InitDefaultsscc_info_cmd_tx_data_reply_hpc_2emsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hpc::_cmd_tx_data_reply_default_instance_;
    new (ptr) ::hpc::cmd_tx_data_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hpc::cmd_tx_data_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cmd_tx_data_reply_hpc_2emsg =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_cmd_tx_data_reply_hpc_2emsg}, {}};

static void InitDefaultsscc_info_simple_cmd_reply_hpc_2emsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hpc::_simple_cmd_reply_default_instance_;
    new (ptr) ::hpc::simple_cmd_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hpc::simple_cmd_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_simple_cmd_reply_hpc_2emsg =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_simple_cmd_reply_hpc_2emsg}, {}};

static void InitDefaultsscc_info_simple_cmd_reply_data_hpc_2emsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hpc::_simple_cmd_reply_data_default_instance_;
    new (ptr) ::hpc::simple_cmd_reply_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hpc::simple_cmd_reply_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_simple_cmd_reply_data_hpc_2emsg =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_simple_cmd_reply_data_hpc_2emsg}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hpc_2emsg[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hpc_2emsg = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hpc_2emsg = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hpc_2emsg::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply, preamble_),
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply, len_),
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply, version_),
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply, total_package_len_),
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply, seq_),
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply, flag_),
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply, cmd_),
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply, rtcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply_data, preamble_),
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply_data, len_),
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply_data, version_),
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply_data, total_package_len_),
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply_data, seq_),
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply_data, flag_),
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply_data, cmd_),
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply_data, rtcode_),
  PROTOBUF_FIELD_OFFSET(::hpc::simple_cmd_reply_data, databuf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_begin_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_begin_reply, preamble_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_begin_reply, len_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_begin_reply, version_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_begin_reply, total_package_len_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_begin_reply, seq_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_begin_reply, flag_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_begin_reply, cmd_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_begin_reply, base_address_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_begin_reply, interrupt_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_tx_data_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_tx_data_reply, preamble_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_tx_data_reply, len_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_tx_data_reply, version_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_tx_data_reply, total_package_len_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_tx_data_reply, seq_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_tx_data_reply, flag_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_tx_data_reply, cmd_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_tx_data_reply, input_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_get_data_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_get_data_reply, preamble_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_get_data_reply, len_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_get_data_reply, version_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_get_data_reply, total_package_len_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_get_data_reply, seq_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_get_data_reply, flag_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_get_data_reply, cmd_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_get_data_reply, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_config_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_config_reply, preamble_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_config_reply, len_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_config_reply, version_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_config_reply, total_package_len_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_config_reply, seq_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_config_reply, flag_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_config_reply, cmd_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_config_reply, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_test_reg_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_test_reg_reply, preamble_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_test_reg_reply, len_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_test_reg_reply, version_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_test_reg_reply, total_package_len_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_test_reg_reply, seq_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_test_reg_reply, flag_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_test_reg_reply, cmd_),
  PROTOBUF_FIELD_OFFSET(::hpc::cmd_test_reg_reply, reg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::hpc::simple_cmd_reply)},
  { 13, -1, sizeof(::hpc::simple_cmd_reply_data)},
  { 27, -1, sizeof(::hpc::cmd_begin_reply)},
  { 41, -1, sizeof(::hpc::cmd_tx_data_reply)},
  { 54, -1, sizeof(::hpc::cmd_get_data_reply)},
  { 67, -1, sizeof(::hpc::cmd_config_reply)},
  { 80, -1, sizeof(::hpc::cmd_test_reg_reply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hpc::_simple_cmd_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hpc::_simple_cmd_reply_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hpc::_cmd_begin_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hpc::_cmd_tx_data_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hpc::_cmd_get_data_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hpc::_cmd_config_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hpc::_cmd_test_reg_reply_default_instance_),
};

const char descriptor_table_protodef_hpc_2emsg[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\007hpc.msg\022\003hpc\"\225\001\n\020simple_cmd_reply\022\020\n\010p"
  "reamble\030\001 \001(\r\022\013\n\003len\030\002 \001(\r\022\017\n\007version\030\003 "
  "\001(\r\022\031\n\021total_package_len\030\004 \001(\r\022\013\n\003seq\030\005 "
  "\001(\r\022\014\n\004flag\030\006 \001(\r\022\013\n\003cmd\030\007 \001(\r\022\016\n\006rtcode"
  "\030\010 \001(\r\"\253\001\n\025simple_cmd_reply_data\022\020\n\010prea"
  "mble\030\001 \001(\r\022\013\n\003len\030\002 \001(\r\022\017\n\007version\030\003 \001(\r"
  "\022\031\n\021total_package_len\030\004 \001(\r\022\013\n\003seq\030\005 \001(\r"
  "\022\014\n\004flag\030\006 \001(\r\022\013\n\003cmd\030\007 \001(\r\022\016\n\006rtcode\030\010 "
  "\001(\r\022\017\n\007databuf\030\t \001(\t\"\262\001\n\017cmd_begin_reply"
  "\022\020\n\010preamble\030\001 \001(\r\022\013\n\003len\030\002 \001(\r\022\017\n\007versi"
  "on\030\003 \001(\r\022\031\n\021total_package_len\030\004 \001(\r\022\013\n\003s"
  "eq\030\005 \001(\r\022\014\n\004flag\030\006 \001(\r\022\013\n\003cmd\030\007 \001(\r\022\024\n\014b"
  "ase_address\030\010 \001(\004\022\026\n\016interrupt_path\030\t \001("
  "\t\"\235\001\n\021cmd_tx_data_reply\022\020\n\010preamble\030\001 \001("
  "\r\022\013\n\003len\030\002 \001(\r\022\017\n\007version\030\003 \001(\r\022\031\n\021total"
  "_package_len\030\004 \001(\r\022\013\n\003seq\030\005 \001(\r\022\014\n\004flag\030"
  "\006 \001(\r\022\013\n\003cmd\030\007 \001(\r\022\025\n\rinput_address\030\010 \001("
  "\004\"\225\001\n\022cmd_get_data_reply\022\020\n\010preamble\030\001 \001"
  "(\r\022\013\n\003len\030\002 \001(\r\022\017\n\007version\030\003 \001(\r\022\031\n\021tota"
  "l_package_len\030\004 \001(\r\022\013\n\003seq\030\005 \001(\r\022\014\n\004flag"
  "\030\006 \001(\r\022\013\n\003cmd\030\007 \001(\r\022\014\n\004data\030\010 \001(\t\"\225\001\n\020cm"
  "d_config_reply\022\020\n\010preamble\030\001 \001(\r\022\013\n\003len\030"
  "\002 \001(\r\022\017\n\007version\030\003 \001(\r\022\031\n\021total_package_"
  "len\030\004 \001(\r\022\013\n\003seq\030\005 \001(\r\022\014\n\004flag\030\006 \001(\r\022\013\n\003"
  "cmd\030\007 \001(\r\022\016\n\006config\030\010 \001(\t\"\224\001\n\022cmd_test_r"
  "eg_reply\022\020\n\010preamble\030\001 \001(\r\022\013\n\003len\030\002 \001(\r\022"
  "\017\n\007version\030\003 \001(\r\022\031\n\021total_package_len\030\004 "
  "\001(\r\022\013\n\003seq\030\005 \001(\r\022\014\n\004flag\030\006 \001(\r\022\013\n\003cmd\030\007 "
  "\001(\r\022\013\n\003reg\030\010 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hpc_2emsg_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hpc_2emsg_sccs[7] = {
  &scc_info_cmd_begin_reply_hpc_2emsg.base,
  &scc_info_cmd_config_reply_hpc_2emsg.base,
  &scc_info_cmd_get_data_reply_hpc_2emsg.base,
  &scc_info_cmd_test_reg_reply_hpc_2emsg.base,
  &scc_info_cmd_tx_data_reply_hpc_2emsg.base,
  &scc_info_simple_cmd_reply_hpc_2emsg.base,
  &scc_info_simple_cmd_reply_data_hpc_2emsg.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hpc_2emsg_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hpc_2emsg = {
  false, false, descriptor_table_protodef_hpc_2emsg, "hpc.msg", 1144,
  &descriptor_table_hpc_2emsg_once, descriptor_table_hpc_2emsg_sccs, descriptor_table_hpc_2emsg_deps, 7, 0,
  schemas, file_default_instances, TableStruct_hpc_2emsg::offsets,
  file_level_metadata_hpc_2emsg, 7, file_level_enum_descriptors_hpc_2emsg, file_level_service_descriptors_hpc_2emsg,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hpc_2emsg = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hpc_2emsg)), true);
namespace hpc {

// ===================================================================

void simple_cmd_reply::InitAsDefaultInstance() {
}
class simple_cmd_reply::_Internal {
 public:
};

simple_cmd_reply::simple_cmd_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hpc.simple_cmd_reply)
}
simple_cmd_reply::simple_cmd_reply(const simple_cmd_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&preamble_, &from.preamble_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtcode_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(rtcode_));
  // @@protoc_insertion_point(copy_constructor:hpc.simple_cmd_reply)
}

void simple_cmd_reply::SharedCtor() {
  ::memset(&preamble_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtcode_) -
      reinterpret_cast<char*>(&preamble_)) + sizeof(rtcode_));
}

simple_cmd_reply::~simple_cmd_reply() {
  // @@protoc_insertion_point(destructor:hpc.simple_cmd_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void simple_cmd_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void simple_cmd_reply::ArenaDtor(void* object) {
  simple_cmd_reply* _this = reinterpret_cast< simple_cmd_reply* >(object);
  (void)_this;
}
void simple_cmd_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void simple_cmd_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const simple_cmd_reply& simple_cmd_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_simple_cmd_reply_hpc_2emsg.base);
  return *internal_default_instance();
}


void simple_cmd_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:hpc.simple_cmd_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&preamble_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtcode_) -
      reinterpret_cast<char*>(&preamble_)) + sizeof(rtcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* simple_cmd_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          preamble_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_package_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_package_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rtcode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          rtcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* simple_cmd_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hpc.simple_cmd_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 preamble = 1;
  if (this->preamble() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_preamble(), target);
  }

  // uint32 len = 2;
  if (this->len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_len(), target);
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  // uint32 total_package_len = 4;
  if (this->total_package_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_package_len(), target);
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seq(), target);
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flag(), target);
  }

  // uint32 cmd = 7;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cmd(), target);
  }

  // uint32 rtcode = 8;
  if (this->rtcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rtcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hpc.simple_cmd_reply)
  return target;
}

size_t simple_cmd_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hpc.simple_cmd_reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 preamble = 1;
  if (this->preamble() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_preamble());
  }

  // uint32 len = 2;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_len());
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 total_package_len = 4;
  if (this->total_package_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_package_len());
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flag());
  }

  // uint32 cmd = 7;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cmd());
  }

  // uint32 rtcode = 8;
  if (this->rtcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rtcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void simple_cmd_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hpc.simple_cmd_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const simple_cmd_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<simple_cmd_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hpc.simple_cmd_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hpc.simple_cmd_reply)
    MergeFrom(*source);
  }
}

void simple_cmd_reply::MergeFrom(const simple_cmd_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hpc.simple_cmd_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.preamble() != 0) {
    _internal_set_preamble(from._internal_preamble());
  }
  if (from.len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.total_package_len() != 0) {
    _internal_set_total_package_len(from._internal_total_package_len());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
  if (from.rtcode() != 0) {
    _internal_set_rtcode(from._internal_rtcode());
  }
}

void simple_cmd_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hpc.simple_cmd_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void simple_cmd_reply::CopyFrom(const simple_cmd_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hpc.simple_cmd_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool simple_cmd_reply::IsInitialized() const {
  return true;
}

void simple_cmd_reply::InternalSwap(simple_cmd_reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(simple_cmd_reply, rtcode_)
      + sizeof(simple_cmd_reply::rtcode_)
      - PROTOBUF_FIELD_OFFSET(simple_cmd_reply, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata simple_cmd_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void simple_cmd_reply_data::InitAsDefaultInstance() {
}
class simple_cmd_reply_data::_Internal {
 public:
};

simple_cmd_reply_data::simple_cmd_reply_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hpc.simple_cmd_reply_data)
}
simple_cmd_reply_data::simple_cmd_reply_data(const simple_cmd_reply_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  databuf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_databuf().empty()) {
    databuf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_databuf(),
      GetArena());
  }
  ::memcpy(&preamble_, &from.preamble_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtcode_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(rtcode_));
  // @@protoc_insertion_point(copy_constructor:hpc.simple_cmd_reply_data)
}

void simple_cmd_reply_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_simple_cmd_reply_data_hpc_2emsg.base);
  databuf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&preamble_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtcode_) -
      reinterpret_cast<char*>(&preamble_)) + sizeof(rtcode_));
}

simple_cmd_reply_data::~simple_cmd_reply_data() {
  // @@protoc_insertion_point(destructor:hpc.simple_cmd_reply_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void simple_cmd_reply_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  databuf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void simple_cmd_reply_data::ArenaDtor(void* object) {
  simple_cmd_reply_data* _this = reinterpret_cast< simple_cmd_reply_data* >(object);
  (void)_this;
}
void simple_cmd_reply_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void simple_cmd_reply_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const simple_cmd_reply_data& simple_cmd_reply_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_simple_cmd_reply_data_hpc_2emsg.base);
  return *internal_default_instance();
}


void simple_cmd_reply_data::Clear() {
// @@protoc_insertion_point(message_clear_start:hpc.simple_cmd_reply_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  databuf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&preamble_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtcode_) -
      reinterpret_cast<char*>(&preamble_)) + sizeof(rtcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* simple_cmd_reply_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          preamble_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_package_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_package_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rtcode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          rtcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string databuf = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_databuf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hpc.simple_cmd_reply_data.databuf"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* simple_cmd_reply_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hpc.simple_cmd_reply_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 preamble = 1;
  if (this->preamble() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_preamble(), target);
  }

  // uint32 len = 2;
  if (this->len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_len(), target);
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  // uint32 total_package_len = 4;
  if (this->total_package_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_package_len(), target);
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seq(), target);
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flag(), target);
  }

  // uint32 cmd = 7;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cmd(), target);
  }

  // uint32 rtcode = 8;
  if (this->rtcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rtcode(), target);
  }

  // string databuf = 9;
  if (this->databuf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_databuf().data(), static_cast<int>(this->_internal_databuf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hpc.simple_cmd_reply_data.databuf");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_databuf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hpc.simple_cmd_reply_data)
  return target;
}

size_t simple_cmd_reply_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hpc.simple_cmd_reply_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string databuf = 9;
  if (this->databuf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_databuf());
  }

  // uint32 preamble = 1;
  if (this->preamble() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_preamble());
  }

  // uint32 len = 2;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_len());
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 total_package_len = 4;
  if (this->total_package_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_package_len());
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flag());
  }

  // uint32 cmd = 7;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cmd());
  }

  // uint32 rtcode = 8;
  if (this->rtcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rtcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void simple_cmd_reply_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hpc.simple_cmd_reply_data)
  GOOGLE_DCHECK_NE(&from, this);
  const simple_cmd_reply_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<simple_cmd_reply_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hpc.simple_cmd_reply_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hpc.simple_cmd_reply_data)
    MergeFrom(*source);
  }
}

void simple_cmd_reply_data::MergeFrom(const simple_cmd_reply_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hpc.simple_cmd_reply_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.databuf().size() > 0) {
    _internal_set_databuf(from._internal_databuf());
  }
  if (from.preamble() != 0) {
    _internal_set_preamble(from._internal_preamble());
  }
  if (from.len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.total_package_len() != 0) {
    _internal_set_total_package_len(from._internal_total_package_len());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
  if (from.rtcode() != 0) {
    _internal_set_rtcode(from._internal_rtcode());
  }
}

void simple_cmd_reply_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hpc.simple_cmd_reply_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void simple_cmd_reply_data::CopyFrom(const simple_cmd_reply_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hpc.simple_cmd_reply_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool simple_cmd_reply_data::IsInitialized() const {
  return true;
}

void simple_cmd_reply_data::InternalSwap(simple_cmd_reply_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  databuf_.Swap(&other->databuf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(simple_cmd_reply_data, rtcode_)
      + sizeof(simple_cmd_reply_data::rtcode_)
      - PROTOBUF_FIELD_OFFSET(simple_cmd_reply_data, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata simple_cmd_reply_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cmd_begin_reply::InitAsDefaultInstance() {
}
class cmd_begin_reply::_Internal {
 public:
};

cmd_begin_reply::cmd_begin_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hpc.cmd_begin_reply)
}
cmd_begin_reply::cmd_begin_reply(const cmd_begin_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interrupt_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interrupt_path().empty()) {
    interrupt_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interrupt_path(),
      GetArena());
  }
  ::memcpy(&preamble_, &from.preamble_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:hpc.cmd_begin_reply)
}

void cmd_begin_reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_cmd_begin_reply_hpc_2emsg.base);
  interrupt_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&preamble_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&preamble_)) + sizeof(cmd_));
}

cmd_begin_reply::~cmd_begin_reply() {
  // @@protoc_insertion_point(destructor:hpc.cmd_begin_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cmd_begin_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  interrupt_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void cmd_begin_reply::ArenaDtor(void* object) {
  cmd_begin_reply* _this = reinterpret_cast< cmd_begin_reply* >(object);
  (void)_this;
}
void cmd_begin_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cmd_begin_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cmd_begin_reply& cmd_begin_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cmd_begin_reply_hpc_2emsg.base);
  return *internal_default_instance();
}


void cmd_begin_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:hpc.cmd_begin_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interrupt_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&preamble_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&preamble_)) + sizeof(cmd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cmd_begin_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          preamble_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_package_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_package_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 base_address = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          base_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interrupt_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_interrupt_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hpc.cmd_begin_reply.interrupt_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cmd_begin_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hpc.cmd_begin_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 preamble = 1;
  if (this->preamble() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_preamble(), target);
  }

  // uint32 len = 2;
  if (this->len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_len(), target);
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  // uint32 total_package_len = 4;
  if (this->total_package_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_package_len(), target);
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seq(), target);
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flag(), target);
  }

  // uint32 cmd = 7;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cmd(), target);
  }

  // uint64 base_address = 8;
  if (this->base_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_base_address(), target);
  }

  // string interrupt_path = 9;
  if (this->interrupt_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interrupt_path().data(), static_cast<int>(this->_internal_interrupt_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hpc.cmd_begin_reply.interrupt_path");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_interrupt_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hpc.cmd_begin_reply)
  return target;
}

size_t cmd_begin_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hpc.cmd_begin_reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interrupt_path = 9;
  if (this->interrupt_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interrupt_path());
  }

  // uint32 preamble = 1;
  if (this->preamble() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_preamble());
  }

  // uint32 len = 2;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_len());
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 total_package_len = 4;
  if (this->total_package_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_package_len());
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flag());
  }

  // uint64 base_address = 8;
  if (this->base_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_base_address());
  }

  // uint32 cmd = 7;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmd_begin_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hpc.cmd_begin_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const cmd_begin_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cmd_begin_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hpc.cmd_begin_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hpc.cmd_begin_reply)
    MergeFrom(*source);
  }
}

void cmd_begin_reply::MergeFrom(const cmd_begin_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hpc.cmd_begin_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interrupt_path().size() > 0) {
    _internal_set_interrupt_path(from._internal_interrupt_path());
  }
  if (from.preamble() != 0) {
    _internal_set_preamble(from._internal_preamble());
  }
  if (from.len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.total_package_len() != 0) {
    _internal_set_total_package_len(from._internal_total_package_len());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.base_address() != 0) {
    _internal_set_base_address(from._internal_base_address());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void cmd_begin_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hpc.cmd_begin_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmd_begin_reply::CopyFrom(const cmd_begin_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hpc.cmd_begin_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmd_begin_reply::IsInitialized() const {
  return true;
}

void cmd_begin_reply::InternalSwap(cmd_begin_reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interrupt_path_.Swap(&other->interrupt_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cmd_begin_reply, cmd_)
      + sizeof(cmd_begin_reply::cmd_)
      - PROTOBUF_FIELD_OFFSET(cmd_begin_reply, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cmd_begin_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cmd_tx_data_reply::InitAsDefaultInstance() {
}
class cmd_tx_data_reply::_Internal {
 public:
};

cmd_tx_data_reply::cmd_tx_data_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hpc.cmd_tx_data_reply)
}
cmd_tx_data_reply::cmd_tx_data_reply(const cmd_tx_data_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&preamble_, &from.preamble_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:hpc.cmd_tx_data_reply)
}

void cmd_tx_data_reply::SharedCtor() {
  ::memset(&preamble_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&preamble_)) + sizeof(cmd_));
}

cmd_tx_data_reply::~cmd_tx_data_reply() {
  // @@protoc_insertion_point(destructor:hpc.cmd_tx_data_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cmd_tx_data_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void cmd_tx_data_reply::ArenaDtor(void* object) {
  cmd_tx_data_reply* _this = reinterpret_cast< cmd_tx_data_reply* >(object);
  (void)_this;
}
void cmd_tx_data_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cmd_tx_data_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cmd_tx_data_reply& cmd_tx_data_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cmd_tx_data_reply_hpc_2emsg.base);
  return *internal_default_instance();
}


void cmd_tx_data_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:hpc.cmd_tx_data_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&preamble_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&preamble_)) + sizeof(cmd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cmd_tx_data_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          preamble_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_package_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_package_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 input_address = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          input_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cmd_tx_data_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hpc.cmd_tx_data_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 preamble = 1;
  if (this->preamble() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_preamble(), target);
  }

  // uint32 len = 2;
  if (this->len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_len(), target);
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  // uint32 total_package_len = 4;
  if (this->total_package_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_package_len(), target);
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seq(), target);
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flag(), target);
  }

  // uint32 cmd = 7;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cmd(), target);
  }

  // uint64 input_address = 8;
  if (this->input_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_input_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hpc.cmd_tx_data_reply)
  return target;
}

size_t cmd_tx_data_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hpc.cmd_tx_data_reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 preamble = 1;
  if (this->preamble() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_preamble());
  }

  // uint32 len = 2;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_len());
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 total_package_len = 4;
  if (this->total_package_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_package_len());
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flag());
  }

  // uint64 input_address = 8;
  if (this->input_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_input_address());
  }

  // uint32 cmd = 7;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmd_tx_data_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hpc.cmd_tx_data_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const cmd_tx_data_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cmd_tx_data_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hpc.cmd_tx_data_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hpc.cmd_tx_data_reply)
    MergeFrom(*source);
  }
}

void cmd_tx_data_reply::MergeFrom(const cmd_tx_data_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hpc.cmd_tx_data_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.preamble() != 0) {
    _internal_set_preamble(from._internal_preamble());
  }
  if (from.len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.total_package_len() != 0) {
    _internal_set_total_package_len(from._internal_total_package_len());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.input_address() != 0) {
    _internal_set_input_address(from._internal_input_address());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void cmd_tx_data_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hpc.cmd_tx_data_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmd_tx_data_reply::CopyFrom(const cmd_tx_data_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hpc.cmd_tx_data_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmd_tx_data_reply::IsInitialized() const {
  return true;
}

void cmd_tx_data_reply::InternalSwap(cmd_tx_data_reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cmd_tx_data_reply, cmd_)
      + sizeof(cmd_tx_data_reply::cmd_)
      - PROTOBUF_FIELD_OFFSET(cmd_tx_data_reply, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cmd_tx_data_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cmd_get_data_reply::InitAsDefaultInstance() {
}
class cmd_get_data_reply::_Internal {
 public:
};

cmd_get_data_reply::cmd_get_data_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hpc.cmd_get_data_reply)
}
cmd_get_data_reply::cmd_get_data_reply(const cmd_get_data_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&preamble_, &from.preamble_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:hpc.cmd_get_data_reply)
}

void cmd_get_data_reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_cmd_get_data_reply_hpc_2emsg.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&preamble_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&preamble_)) + sizeof(cmd_));
}

cmd_get_data_reply::~cmd_get_data_reply() {
  // @@protoc_insertion_point(destructor:hpc.cmd_get_data_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cmd_get_data_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void cmd_get_data_reply::ArenaDtor(void* object) {
  cmd_get_data_reply* _this = reinterpret_cast< cmd_get_data_reply* >(object);
  (void)_this;
}
void cmd_get_data_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cmd_get_data_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cmd_get_data_reply& cmd_get_data_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cmd_get_data_reply_hpc_2emsg.base);
  return *internal_default_instance();
}


void cmd_get_data_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:hpc.cmd_get_data_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&preamble_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&preamble_)) + sizeof(cmd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cmd_get_data_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          preamble_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_package_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_package_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hpc.cmd_get_data_reply.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cmd_get_data_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hpc.cmd_get_data_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 preamble = 1;
  if (this->preamble() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_preamble(), target);
  }

  // uint32 len = 2;
  if (this->len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_len(), target);
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  // uint32 total_package_len = 4;
  if (this->total_package_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_package_len(), target);
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seq(), target);
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flag(), target);
  }

  // uint32 cmd = 7;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cmd(), target);
  }

  // string data = 8;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hpc.cmd_get_data_reply.data");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hpc.cmd_get_data_reply)
  return target;
}

size_t cmd_get_data_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hpc.cmd_get_data_reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 8;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // uint32 preamble = 1;
  if (this->preamble() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_preamble());
  }

  // uint32 len = 2;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_len());
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 total_package_len = 4;
  if (this->total_package_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_package_len());
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flag());
  }

  // uint32 cmd = 7;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmd_get_data_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hpc.cmd_get_data_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const cmd_get_data_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cmd_get_data_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hpc.cmd_get_data_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hpc.cmd_get_data_reply)
    MergeFrom(*source);
  }
}

void cmd_get_data_reply::MergeFrom(const cmd_get_data_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hpc.cmd_get_data_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.preamble() != 0) {
    _internal_set_preamble(from._internal_preamble());
  }
  if (from.len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.total_package_len() != 0) {
    _internal_set_total_package_len(from._internal_total_package_len());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void cmd_get_data_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hpc.cmd_get_data_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmd_get_data_reply::CopyFrom(const cmd_get_data_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hpc.cmd_get_data_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmd_get_data_reply::IsInitialized() const {
  return true;
}

void cmd_get_data_reply::InternalSwap(cmd_get_data_reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cmd_get_data_reply, cmd_)
      + sizeof(cmd_get_data_reply::cmd_)
      - PROTOBUF_FIELD_OFFSET(cmd_get_data_reply, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cmd_get_data_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cmd_config_reply::InitAsDefaultInstance() {
}
class cmd_config_reply::_Internal {
 public:
};

cmd_config_reply::cmd_config_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hpc.cmd_config_reply)
}
cmd_config_reply::cmd_config_reply(const cmd_config_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config().empty()) {
    config_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_config(),
      GetArena());
  }
  ::memcpy(&preamble_, &from.preamble_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:hpc.cmd_config_reply)
}

void cmd_config_reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_cmd_config_reply_hpc_2emsg.base);
  config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&preamble_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&preamble_)) + sizeof(cmd_));
}

cmd_config_reply::~cmd_config_reply() {
  // @@protoc_insertion_point(destructor:hpc.cmd_config_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cmd_config_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void cmd_config_reply::ArenaDtor(void* object) {
  cmd_config_reply* _this = reinterpret_cast< cmd_config_reply* >(object);
  (void)_this;
}
void cmd_config_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cmd_config_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cmd_config_reply& cmd_config_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cmd_config_reply_hpc_2emsg.base);
  return *internal_default_instance();
}


void cmd_config_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:hpc.cmd_config_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&preamble_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&preamble_)) + sizeof(cmd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cmd_config_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          preamble_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_package_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_package_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_config();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hpc.cmd_config_reply.config"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cmd_config_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hpc.cmd_config_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 preamble = 1;
  if (this->preamble() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_preamble(), target);
  }

  // uint32 len = 2;
  if (this->len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_len(), target);
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  // uint32 total_package_len = 4;
  if (this->total_package_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_package_len(), target);
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seq(), target);
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flag(), target);
  }

  // uint32 cmd = 7;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cmd(), target);
  }

  // string config = 8;
  if (this->config().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config().data(), static_cast<int>(this->_internal_config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hpc.cmd_config_reply.config");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hpc.cmd_config_reply)
  return target;
}

size_t cmd_config_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hpc.cmd_config_reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string config = 8;
  if (this->config().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config());
  }

  // uint32 preamble = 1;
  if (this->preamble() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_preamble());
  }

  // uint32 len = 2;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_len());
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 total_package_len = 4;
  if (this->total_package_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_package_len());
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flag());
  }

  // uint32 cmd = 7;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmd_config_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hpc.cmd_config_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const cmd_config_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cmd_config_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hpc.cmd_config_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hpc.cmd_config_reply)
    MergeFrom(*source);
  }
}

void cmd_config_reply::MergeFrom(const cmd_config_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hpc.cmd_config_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config().size() > 0) {
    _internal_set_config(from._internal_config());
  }
  if (from.preamble() != 0) {
    _internal_set_preamble(from._internal_preamble());
  }
  if (from.len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.total_package_len() != 0) {
    _internal_set_total_package_len(from._internal_total_package_len());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void cmd_config_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hpc.cmd_config_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmd_config_reply::CopyFrom(const cmd_config_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hpc.cmd_config_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmd_config_reply::IsInitialized() const {
  return true;
}

void cmd_config_reply::InternalSwap(cmd_config_reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_.Swap(&other->config_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cmd_config_reply, cmd_)
      + sizeof(cmd_config_reply::cmd_)
      - PROTOBUF_FIELD_OFFSET(cmd_config_reply, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cmd_config_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cmd_test_reg_reply::InitAsDefaultInstance() {
}
class cmd_test_reg_reply::_Internal {
 public:
};

cmd_test_reg_reply::cmd_test_reg_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hpc.cmd_test_reg_reply)
}
cmd_test_reg_reply::cmd_test_reg_reply(const cmd_test_reg_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reg().empty()) {
    reg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reg(),
      GetArena());
  }
  ::memcpy(&preamble_, &from.preamble_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&preamble_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:hpc.cmd_test_reg_reply)
}

void cmd_test_reg_reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_cmd_test_reg_reply_hpc_2emsg.base);
  reg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&preamble_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&preamble_)) + sizeof(cmd_));
}

cmd_test_reg_reply::~cmd_test_reg_reply() {
  // @@protoc_insertion_point(destructor:hpc.cmd_test_reg_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cmd_test_reg_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void cmd_test_reg_reply::ArenaDtor(void* object) {
  cmd_test_reg_reply* _this = reinterpret_cast< cmd_test_reg_reply* >(object);
  (void)_this;
}
void cmd_test_reg_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cmd_test_reg_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cmd_test_reg_reply& cmd_test_reg_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cmd_test_reg_reply_hpc_2emsg.base);
  return *internal_default_instance();
}


void cmd_test_reg_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:hpc.cmd_test_reg_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&preamble_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&preamble_)) + sizeof(cmd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cmd_test_reg_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 preamble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          preamble_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_package_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_package_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_reg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hpc.cmd_test_reg_reply.reg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cmd_test_reg_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hpc.cmd_test_reg_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 preamble = 1;
  if (this->preamble() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_preamble(), target);
  }

  // uint32 len = 2;
  if (this->len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_len(), target);
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  // uint32 total_package_len = 4;
  if (this->total_package_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_package_len(), target);
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seq(), target);
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flag(), target);
  }

  // uint32 cmd = 7;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cmd(), target);
  }

  // string reg = 8;
  if (this->reg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reg().data(), static_cast<int>(this->_internal_reg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hpc.cmd_test_reg_reply.reg");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_reg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hpc.cmd_test_reg_reply)
  return target;
}

size_t cmd_test_reg_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hpc.cmd_test_reg_reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reg = 8;
  if (this->reg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reg());
  }

  // uint32 preamble = 1;
  if (this->preamble() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_preamble());
  }

  // uint32 len = 2;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_len());
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 total_package_len = 4;
  if (this->total_package_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_package_len());
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flag());
  }

  // uint32 cmd = 7;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmd_test_reg_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hpc.cmd_test_reg_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const cmd_test_reg_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cmd_test_reg_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hpc.cmd_test_reg_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hpc.cmd_test_reg_reply)
    MergeFrom(*source);
  }
}

void cmd_test_reg_reply::MergeFrom(const cmd_test_reg_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hpc.cmd_test_reg_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reg().size() > 0) {
    _internal_set_reg(from._internal_reg());
  }
  if (from.preamble() != 0) {
    _internal_set_preamble(from._internal_preamble());
  }
  if (from.len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.total_package_len() != 0) {
    _internal_set_total_package_len(from._internal_total_package_len());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void cmd_test_reg_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hpc.cmd_test_reg_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmd_test_reg_reply::CopyFrom(const cmd_test_reg_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hpc.cmd_test_reg_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmd_test_reg_reply::IsInitialized() const {
  return true;
}

void cmd_test_reg_reply::InternalSwap(cmd_test_reg_reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reg_.Swap(&other->reg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cmd_test_reg_reply, cmd_)
      + sizeof(cmd_test_reg_reply::cmd_)
      - PROTOBUF_FIELD_OFFSET(cmd_test_reg_reply, preamble_)>(
          reinterpret_cast<char*>(&preamble_),
          reinterpret_cast<char*>(&other->preamble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cmd_test_reg_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hpc::simple_cmd_reply* Arena::CreateMaybeMessage< ::hpc::simple_cmd_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hpc::simple_cmd_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::hpc::simple_cmd_reply_data* Arena::CreateMaybeMessage< ::hpc::simple_cmd_reply_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hpc::simple_cmd_reply_data >(arena);
}
template<> PROTOBUF_NOINLINE ::hpc::cmd_begin_reply* Arena::CreateMaybeMessage< ::hpc::cmd_begin_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hpc::cmd_begin_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::hpc::cmd_tx_data_reply* Arena::CreateMaybeMessage< ::hpc::cmd_tx_data_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hpc::cmd_tx_data_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::hpc::cmd_get_data_reply* Arena::CreateMaybeMessage< ::hpc::cmd_get_data_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hpc::cmd_get_data_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::hpc::cmd_config_reply* Arena::CreateMaybeMessage< ::hpc::cmd_config_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hpc::cmd_config_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::hpc::cmd_test_reg_reply* Arena::CreateMaybeMessage< ::hpc::cmd_test_reg_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hpc::cmd_test_reg_reply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
